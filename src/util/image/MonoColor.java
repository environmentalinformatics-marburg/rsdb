package util.image;


import org.tinylog.Logger;

public class MonoColor {
	

	//colors from http://matplotlib.org   'viridis' (aka option D)
	private static final int[] colViridisR = new int[]{68,68,68,69,69,69,70,70,70,70,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,71,71,71,71,71,71,70,70,70,70,69,69,69,69,68,68,67,67,67,66,66,65,65,65,64,64,63,63,62,62,61,61,60,60,59,59,58,58,57,57,56,56,55,55,54,54,53,53,52,52,52,51,51,50,50,49,49,48,48,47,47,47,46,46,45,45,44,44,44,43,43,42,42,42,41,41,40,40,40,39,39,39,38,38,37,37,37,36,36,36,35,35,34,34,34,33,33,33,32,32,32,32,31,31,31,30,30,30,30,30,30,29,29,29,29,29,30,30,30,30,30,31,31,32,32,33,33,34,35,36,36,37,38,39,40,42,43,44,45,47,48,49,51,52,54,55,57,59,60,62,64,66,68,69,71,73,75,77,79,81,83,85,88,90,92,94,96,98,101,103,105,108,110,112,115,117,120,122,124,127,129,132,135,137,140,142,145,147,150,153,155,158,161,163,166,169,171,174,177,179,182,185,188,190,193,196,198,201,204,207,209,212,215,217,220,223,225,228,230,233,236,238,241,243,246,248,251,253,255};
	private static final int[] colViridisG = new int[]{0,1,2,4,5,7,8,10,12,13,15,16,17,19,20,22,23,24,26,27,28,30,31,32,34,35,36,38,39,40,41,43,44,45,46,48,49,50,51,53,54,55,56,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,174,175,176,177,178,179,180,181,182,183,184,184,185,186,187,188,189,190,191,191,192,193,194,195,196,196,197,198,199,200,200,201,202,203,203,204,205,206,206,207,208,208,209,210,210,211,212,212,213,214,214,215,215,216,216,217,218,218,219,219,220,220,221,221,221,222,222,223,223,224,224,224,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233};
	private static final int[] colViridisB = new int[]{84,85,87,88,90,91,93,94,96,97,99,100,101,103,104,105,106,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,124,125,126,127,128,128,129,130,130,131,132,132,133,133,134,134,135,135,136,136,136,137,137,137,138,138,138,139,139,139,139,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,141,141,141,141,141,141,140,140,140,140,139,139,139,139,138,138,138,137,137,137,136,136,135,135,134,134,133,133,132,132,131,131,130,130,129,128,128,127,126,126,125,124,123,122,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,101,100,99,98,96,95,94,92,91,90,88,87,85,84,82,81,79,78,76,75,73,71,70,68,67,65,63,61,60,58,56,55,53,51,49,48,46,44,42,41,39,37,36,34,32,31,30,28,27,26,25,24,24,23,23,23,23,24,25,25,26,28,29,31,32,34,36};

	//colors from http://matplotlib.org   'viridis' (aka option D)   first to zero
	//private static final int[] colR = new int[]{0,68,68,69,69,69,70,70,70,70,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,71,71,71,71,71,71,70,70,70,70,69,69,69,69,68,68,67,67,67,66,66,65,65,65,64,64,63,63,62,62,61,61,60,60,59,59,58,58,57,57,56,56,55,55,54,54,53,53,52,52,52,51,51,50,50,49,49,48,48,47,47,47,46,46,45,45,44,44,44,43,43,42,42,42,41,41,40,40,40,39,39,39,38,38,37,37,37,36,36,36,35,35,34,34,34,33,33,33,32,32,32,32,31,31,31,30,30,30,30,30,30,29,29,29,29,29,30,30,30,30,30,31,31,32,32,33,33,34,35,36,36,37,38,39,40,42,43,44,45,47,48,49,51,52,54,55,57,59,60,62,64,66,68,69,71,73,75,77,79,81,83,85,88,90,92,94,96,98,101,103,105,108,110,112,115,117,120,122,124,127,129,132,135,137,140,142,145,147,150,153,155,158,161,163,166,169,171,174,177,179,182,185,188,190,193,196,198,201,204,207,209,212,215,217,220,223,225,228,230,233,236,238,241,243,246,248,251,253,255};
	//private static final int[] colG = new int[]{0,1,2,4,5,7,8,10,12,13,15,16,17,19,20,22,23,24,26,27,28,30,31,32,34,35,36,38,39,40,41,43,44,45,46,48,49,50,51,53,54,55,56,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,174,175,176,177,178,179,180,181,182,183,184,184,185,186,187,188,189,190,191,191,192,193,194,195,196,196,197,198,199,200,200,201,202,203,203,204,205,206,206,207,208,208,209,210,210,211,212,212,213,214,214,215,215,216,216,217,218,218,219,219,220,220,221,221,221,222,222,223,223,224,224,224,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233};
	//private static final int[] colB = new int[]{0,85,87,88,90,91,93,94,96,97,99,100,101,103,104,105,106,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,124,125,126,127,128,128,129,130,130,131,132,132,133,133,134,134,135,135,136,136,136,137,137,137,138,138,138,139,139,139,139,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,141,141,141,141,141,141,140,140,140,140,139,139,139,139,138,138,138,137,137,137,136,136,135,135,134,134,133,133,132,132,131,131,130,130,129,128,128,127,126,126,125,124,123,122,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,101,100,99,98,96,95,94,92,91,90,88,87,85,84,82,81,79,78,76,75,73,71,70,68,67,65,63,61,60,58,56,55,53,51,49,48,46,44,42,41,39,37,36,34,32,31,30,28,27,26,25,24,24,23,23,23,23,24,25,25,26,28,29,31,32,34,36};

	//colors from http://matplotlib.org  'inferno' (aka option B) first to zero   last to 255
	public static final int[] colInfernoR = new int[]{0,0,0,1,1,1,2,3,3,4,4,5,6,7,8,9,10,12,13,14,15,17,18,19,21,22,23,25,26,28,30,31,33,34,36,38,40,41,43,45,47,49,50,52,54,56,57,59,61,63,64,66,68,69,71,73,74,76,78,79,81,83,84,86,87,89,91,92,94,95,97,99,100,102,103,105,107,108,110,111,113,115,116,118,119,121,123,124,126,127,129,131,132,134,136,137,139,140,142,144,145,147,148,150,152,153,155,156,158,160,161,163,164,166,167,169,171,172,174,175,177,178,180,181,183,184,186,187,189,190,192,193,195,196,198,199,200,202,203,205,206,207,209,210,211,212,214,215,216,217,219,220,221,222,223,224,225,227,228,229,230,231,232,233,234,234,235,236,237,238,239,240,240,241,242,243,243,244,245,245,246,246,247,247,248,248,249,249,250,250,251,251,251,252,252,252,252,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,253,253,253,253,253,253,252,252,252,251,251,251,250,250,250,249,249,248,248,247,247,246,246,245,245,244,244,244,243,243,243,243,243,243,244,244,245,246,247,248,249,251,252,255};
	public static final int[] colInfernoG = new int[]{0,0,0,0,1,1,1,2,2,3,3,4,4,5,6,6,7,7,8,8,9,9,10,10,11,11,11,11,12,12,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,9,9,9,9,9,9,10,10,10,11,11,12,12,13,13,14,14,15,16,16,17,17,18,19,19,20,20,21,22,22,23,23,24,24,25,26,26,27,27,28,29,29,30,30,31,31,32,32,33,34,34,35,35,36,36,37,38,38,39,39,40,41,41,42,42,43,44,44,45,46,46,47,48,48,49,50,50,51,52,53,53,54,55,56,57,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,79,80,81,82,84,85,86,88,89,90,92,93,95,96,98,99,101,102,104,105,107,109,110,112,113,115,117,118,120,122,124,125,127,129,131,132,134,136,138,139,141,143,145,147,149,150,152,154,156,158,160,162,164,166,168,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,226,228,230,232,234,236,237,239,241,242,244,245,247,248,249,251,252,253,254,255,255};
	public static final int[] colInfernoB = new int[]{0,4,6,7,9,12,14,16,18,20,22,25,27,29,31,34,36,38,40,43,45,48,50,52,55,57,60,62,65,67,70,72,74,77,79,81,83,85,87,89,91,93,94,96,97,98,99,101,102,102,103,104,105,106,106,107,107,108,108,109,109,109,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,110,110,110,110,110,110,109,109,109,108,108,108,107,107,107,106,106,106,105,105,104,104,103,103,102,101,101,100,100,99,98,98,97,96,95,95,94,93,92,92,91,90,89,88,87,86,85,85,84,83,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,65,63,62,61,60,59,58,57,55,54,53,52,51,49,48,47,46,44,43,42,41,39,38,37,36,34,33,32,30,29,28,27,25,24,23,21,20,19,17,16,15,13,12,11,10,8,8,7,6,6,6,6,6,6,7,7,8,10,11,13,15,16,18,20,22,24,26,28,31,33,35,37,40,42,45,47,50,53,55,58,61,64,67,70,73,76,80,83,86,90,94,97,101,105,109,113,118,122,126,130,134,139,143,147,151,154,158,162,255};
	
	//colors from https://cran.r-project.org/web/packages/viridisLite/index.html  cividis (Jamie R. Nu√±ez and Sean M. Colby)
	private static final int[] colCividisR = new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,11,15,18,21,24,26,29,31,33,35,36,38,40,42,43,45,46,48,49,50,52,53,54,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,93,94,95,96,97,98,99,100,100,101,102,103,104,105,106,107,108,108,109,110,111,112,113,114,114,115,116,117,118,119,120,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,203,204,205,206,207,208,209,210,211,212,214,215,216,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,246,247,248,249,250,251,253,254,255,255,255,255,255,255};
	private static final int[] colCividisG = new int[]{32,33,34,34,35,36,37,37,38,39,39,40,41,42,42,43,44,44,45,46,46,47,47,48,48,49,50,51,51,52,53,54,54,55,56,56,57,58,59,59,60,61,62,62,63,64,64,65,66,67,67,68,69,69,70,71,72,72,73,74,74,75,76,77,77,78,79,79,80,81,82,82,83,84,84,85,86,87,87,88,89,89,90,91,92,92,93,94,95,95,96,97,97,98,99,100,100,101,102,102,103,104,105,105,106,107,108,108,109,110,110,111,112,113,113,114,115,116,116,117,118,119,119,120,121,122,122,123,124,125,125,126,127,128,128,129,130,131,131,132,133,134,135,135,136,137,138,138,139,140,141,142,142,143,144,145,146,146,147,148,149,150,150,151,152,153,154,154,155,156,157,158,159,159,160,161,162,163,164,164,165,166,167,168,169,169,170,171,172,173,174,175,175,176,177,178,179,180,181,181,182,183,184,185,186,187,188,188,189,190,191,192,193,194,195,196,197,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234};
	private static final int[] colCividisB = new int[]{77,78,80,82,83,85,87,88,90,92,94,96,97,99,101,103,105,106,108,110,111,111,111,111,111,111,111,111,111,111,110,110,110,110,110,109,109,109,109,109,109,109,108,108,108,108,108,108,108,108,108,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,110,110,110,110,110,111,111,111,111,111,112,112,112,112,113,113,113,113,114,114,114,115,115,115,116,116,116,117,117,117,118,118,119,119,119,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,120,120,120,120,120,120,120,120,120,119,119,119,119,119,119,119,118,118,118,118,118,117,117,117,117,116,116,116,116,115,115,115,114,114,114,113,113,113,112,112,112,111,111,111,110,110,109,109,109,108,108,107,107,106,106,105,105,104,104,103,103,102,102,101,100,100,99,99,98,97,97,96,95,95,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,70,69,68,66,66,67,68,70};

	public static final int[] colViridis = colorBundle(colViridisR, colViridisG, colViridisB);
	public static final int[] colInferno = colorBundle(colInfernoR, colInfernoG, colInfernoB);
	public static final int[] colCividis = colorBundle(colCividisR, colCividisG, colCividisB);
	
	/**
	 * 
	 * @param palText nullable
	 * @return nullable
	 */
	public static int[] getPaletteDefaultNull(String palText) {
		if(palText == null || palText.isEmpty()) {
			return null;
		}
		switch(palText) {
		case "grey":
			return null;
		case "color":				
		case "inferno":
			return MonoColor.colInferno;
		case "viridis":
			return MonoColor.colViridis;
		case "jet":
			return MonoColor.colJet;
		case "cividis":
			return MonoColor.colCividis;
		default:
			Logger.warn("unknown palette: " + palText);
			return null;
		}		
	}

	private static int[] colorBundle(int[] colR, int[] colG, int[] colB) {
		int len = colR.length;
		//Logger.info("col len " + len);
		int[] col = new int[len];
		if(colG.length != len || colB.length != len) {
			throw new RuntimeException("wrong length");
		}
		for (int i = 0; i < len; i++) {
			int r = colR[i];
			int g = colG[i];
			int b = colB[i];
			int c = 0xff000000 | (r<<16) | (g<<8) | b;
			col[i] = c;
		}
		return col;
	}

	public static final int[] colJetR = new int[256];
	public static final int[] colJetG = new int[256];
	public static final int[] colJetB = new int[256];
	public static final int[] colJet = new int[colJetR.length];

	static {

		for(int i=0; i<256; i++) {
			int j = (i*1)%256;
			double n = (4d * j) / 256d;
			colJetR[i]=(int) (255d*Math.min(Math.max(Math.min(n-1.5d,-n+4.5d),0d),1d));
			colJetG[i]=(int) (255d*Math.min(Math.max(Math.min(n-0.5d,-n+3.5d),0d),1d));
			colJetB[i]=(int) (255d*Math.min(Math.max(Math.min(n+0.5d,-n+2.5d),0d),1d));
		}


		if(colJetR.length!=colJetG.length || colJetG.length!=colJetB.length) {
			throw new RuntimeException("wrong length");
		}
		int len = colJet.length;
		for (int i = 0; i < len; i++) {
			int r = colJetR[i];
			int g = colJetG[i];
			int b = colJetB[i];
			colJet[i] = 0xff000000 | (r<<16) | (g<<8) | b;			
		}
	}

	public static int getSafeRGBA256(int v) {
		if(v>255) {
			v=255;
		}
		if(v<0) {
			v=0;
		}
		return colInferno[v];
	}

	public static int getSafeRGBA(double v) {
		return getSafeRGBA256((int) Math.round(255d*v));
	}

	/**
	 * modified form of
	 * http://martin.ankerl.com/2007/10/04/optimized-pow-approximation-for-java-and-c-c/
	 * @param a
	 * @param b
	 * @return
	 */
	public static double pow(final double a, final double b) {
		final int x = (int) (Double.doubleToRawLongBits(a) >> 32);
		final int y = (int) (b * (x - 1072632447) + 1072632447);
		return Double.longBitsToDouble(((long) y) << 32);
	}

	/**
	 * http://martin.ankerl.com/2012/01/25/optimized-approximative-pow-in-c-and-cpp/
	 * resp http://pastebin.com/ZW95gEyr
	 * @param a
	 * @param b
	 * @return
	 */
	public static double powPrecise(final double a, final double b) {
		// exponentiation by squaring
		double r = 1.0;
		int exp = (int) b;
		double base = a;
		while (exp != 0) {
			if ((exp & 1) != 0) {
				r *= base;
			}
			base *= base;
			exp >>= 1;
		}

		// use the IEEE 754 trick for the fraction of the exponent
		final double b_faction = b - (int)b;
		final long tmp = Double.doubleToRawLongBits(a);
		final long tmp2 = (long) (b_faction * (tmp - 4606921280493453312L)) + 4606921280493453312L;
		return r * Double.longBitsToDouble(tmp2);
	}
}
